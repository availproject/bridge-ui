{"version":3,"file":"index.esm.js","sources":["../src/hooks/metamask/utils/index.ts","../src/hooks/metamask/MetamaskContext.tsx","../src/hooks/metamask/index.ts","../src/components/wallets/DisconnectWallet.tsx","../src/components/wallets/AccountSelector.tsx","../src/utils.ts","../src/components/wallets/WalletSelector.tsx","../src/stores/availwallet.ts","../src/stores/api.ts","../src/components/wallets/AvailWalletConnect.tsx","../src/components/wallets/AvailWalletProvider.tsx"],"sourcesContent":["// Explicitly retype MetaMaskInpageProvider to avoid import issues\nimport type { MetaMaskInpageProvider } from '@metamask/providers';\n\n// Add ethereum to Window interface\ndeclare global {\n  interface Window {\n    ethereum?: MetaMaskInpageProvider & {\n      detected?: MetaMaskInpageProvider[];\n      providers?: MetaMaskInpageProvider[];\n    };\n  }\n}\n\n/**\n * Check if the current provider supports snaps by calling `wallet_getSnaps`.\n */\nexport async function hasSnapsSupport(\n  provider: MetaMaskInpageProvider = window.ethereum as MetaMaskInpageProvider,\n) {\n  try {\n    await provider.request({\n      method: 'wallet_getSnaps',\n    });\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get a provider that supports snaps.\n */\nexport async function getSnapsProvider() {\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  if (window.ethereum && await hasSnapsSupport(window.ethereum as MetaMaskInpageProvider)) {\n    return window.ethereum as MetaMaskInpageProvider;\n  }\n\n  if (window.ethereum?.detected) {\n    for (const provider of window.ethereum.detected) {\n      if (await hasSnapsSupport(provider)) {\n        return provider;\n      }\n    }\n  }\n\n  if (window.ethereum?.providers) {\n    for (const provider of window.ethereum.providers) {\n      if (await hasSnapsSupport(provider)) {\n        return provider;\n      }\n    }\n  }\n\n  return null;\n}\n\n/**\n * Check if a snap ID is a local snap ID.\n */\nexport const isLocalSnap = (snapId: string) => snapId.startsWith('local:');\n\n// Set a default snap origin\nexport const defaultSnapOrigin = process.env.SNAP_ORIGIN ?? `npm:@avail-project/avail-snap`;","import type { MetaMaskInpageProvider } from '@metamask/providers';\nimport type { ReactNode } from 'react';\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { Snap } from '../metamask';\nimport { getSnapsProvider } from './utils';\n\n\ntype MetaMaskContextType = {\n  provider: MetaMaskInpageProvider | null;\n  installedSnap: Snap | null;\n  error: Error | null;\n  setInstalledSnap: (snap: Snap | null) => void;\n  setError: (error: Error) => void;\n};\n\nexport const MetaMaskContext = createContext<MetaMaskContextType>({\n  provider: null,\n  installedSnap: null,\n  error: null,\n  setInstalledSnap: () => {\n    /* no-op */\n  },\n  setError: () => {\n    /* no-op */\n  },\n});\n\n/**\n * MetaMask context provider to handle MetaMask and snap status.\n *\n * @param props - React Props.\n * @param props.children - React component to be wrapped by the Provider.\n * @returns JSX.\n */\nexport const MetaMaskProvider = ({ children }: { children: ReactNode }) => {\n  const [provider, setProvider] = useState<MetaMaskInpageProvider | null>(null);\n  const [installedSnap, setInstalledSnap] = useState<Snap | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    getSnapsProvider().then(setProvider).catch(console.error);\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      const timeout = setTimeout(() => {\n        setError(null);\n      }, 10000);\n\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n\n    return undefined;\n  }, [error]);\n\n  return (\n    <MetaMaskContext.Provider\n      value={{ provider, error, setError, installedSnap, setInstalledSnap }}\n    >\n      {children}\n    </MetaMaskContext.Provider>\n  );\n};\n\n/**\n * Utility hook to consume the MetaMask context.\n *\n * @returns The MetaMask context.\n */\nexport function useMetaMaskContext() {\n  return useContext(MetaMaskContext);\n}","import { MetaMaskContext, MetaMaskProvider, useMetaMaskContext } from './MetamaskContext';\n\n// Re-export types\nexport type Snap = {\n  permissionName: string;\n  id: string;\n  version: string;\n  initialPermissions: Record<string, unknown>;\n};\n\nexport type GetSnapsResponse = Record<string, Snap>;\n\nexport type InvokeSnapParams = {\n  method: string;\n  params?: Record<string, unknown>;\n};\n\nexport type Request = (params: { method: string; params?: any }) => Promise<unknown | null>;\n\n// Default snap origin\nexport const defaultSnapOrigin = process.env.SNAP_ORIGIN ?? `npm:@avail-project/avail-snap`;\n\n// Export context components\nexport { MetaMaskContext, MetaMaskProvider, useMetaMaskContext };\n\n// Define hooks here instead of importing\n\nexport function useRequest(): Request {\n  const context = useMetaMaskContext();\n  \n  return async ({ method, params }) => {\n    try {\n      const data = await context.provider?.request({\n        method,\n        params,\n      }) ?? null;\n\n      return data;\n    } catch (error) {\n      context.setError(error as Error);\n      return null;\n    }\n  };\n}\n\nexport function useMetaMask() {\n  const { provider, setInstalledSnap, installedSnap } = useMetaMaskContext();\n  const request = useRequest();\n  const [isFlask, setIsFlask] = useState(false);\n  const [metamaskInstalled, setMetamaskInstalled] = useState(false);\n\n  useEffect(() => {\n    const detectMetaMask = () => {\n      if (typeof window === 'undefined') {\n        return;\n      }\n      \n      const { ethereum } = window as any;\n      const isMetaMaskInstalled = Boolean(ethereum && ethereum.isMetaMask);\n      setMetamaskInstalled(isMetaMaskInstalled);\n    };\n\n    detectMetaMask();\n  }, []);\n\n  const snapsDetected = provider !== null;\n\n  const detectFlask = async () => {\n    const clientVersion = await request({\n      method: 'web3_clientVersion',\n    });\n\n    const isFlaskDetected = (clientVersion as string[])?.includes('flask');\n    setIsFlask(isFlaskDetected);\n  };\n\n  const detectMetaMask = () => {\n    const { ethereum } = window as any;\n    return Boolean(ethereum && ethereum.isMetaMask);\n  };\n\n  const getSnap = async () => {\n    const snaps = (await request({\n      method: 'wallet_getSnaps',\n    })) as GetSnapsResponse;\n\n    setInstalledSnap(snaps[defaultSnapOrigin] ?? null);\n  };\n\n  useEffect(() => {\n    const detect = async () => {\n      if (provider) {\n        await detectMetaMask();\n        await getSnap();\n      }\n    };\n\n    detect().catch(console.error);\n  }, [provider]);\n\n  return { isFlask, snapsDetected, installedSnap, getSnap, detectMetaMask, metamaskInstalled };\n}\n\nexport function useInvokeSnap(snapId = defaultSnapOrigin) {\n  const request = useRequest();\n\n  const invokeSnap = async ({ method, params }: InvokeSnapParams) =>\n    request({\n      method: 'wallet_invokeSnap',\n      params: {\n        snapId,\n        request: params ? { method, params } : { method },\n      },\n    });\n\n  return invokeSnap;\n}\n\nexport function useRequestSnap(\n  snapId = defaultSnapOrigin,\n  version?: string,\n) {\n  const request = useRequest();\n  const { setInstalledSnap } = useMetaMaskContext();\n\n  const requestSnap = async () => {\n    const snaps = (await request({\n      method: 'wallet_requestSnaps',\n      params: {\n        [snapId]: version ? { version } : {},\n      },\n    })) as Record<string, Snap>;\n\n    setInstalledSnap(snaps?.[snapId] ?? null);\n  };\n\n  return requestSnap;\n}\n\n// Import React for useState and useEffect\nimport { useState, useEffect } from 'react';","import React, { memo } from 'react';\nimport { DisconnectWalletProps } from '../../types';\n\nexport const DisconnectWallet = memo(({\n  selected, \n  installedSnap, \n  onDisconnect \n}: DisconnectWalletProps) => {\n  if (!selected) return null;\n\n  return (\n    <div\n      className=\"aw-flex-row aw-items-center aw-justify-center aw-text-sm aw-font-medium aw-rounded-xl aw-cursor-pointer aw-bg-darker aw-text-white aw-p-4\"\n      onClick={() => {\n        navigator.clipboard.writeText(selected.address);\n      }}\n    >\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"aw-pr-2 aw-h-5 aw-w-5\">\n        <path d=\"M21 12V7H5a2 2 0 0 1 0-4h14v4\"/>\n        <path d=\"M3 5v14a2 2 0 0 0 2 2h16v-5\"/>\n        <path d=\"M18 9a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v-8Z\"/>\n      </svg>\n      {selected.source === \"MetamaskSnap\"\n        ? installedSnap\n          ? selected.address.slice(0, 6) + \"...\" + selected.address?.slice(-4)\n          : \"Retry Connecting\"\n        : selected.address.slice(0, 6) + \"...\" + selected.address?.slice(-4)}\n      \n      <button className=\"aw-ml-2 aw-button\" onClick={onDisconnect}>\n        {selected.source === \"MetamaskSnap\" ? (\n          installedSnap ? (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 352 512\" fill=\"currentColor\" width=\"12\" height=\"12\">\n              <path d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"></path>\n            </svg>\n          ) : (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" fill=\"currentColor\" width=\"12\" height=\"12\">\n              <path d=\"M370.72 133.28C339.458 104.008 298.888 87.962 255.848 88c-77.458.068-144.328 53.178-162.791 126.85-1.344 5.363-6.122 9.15-11.651 9.15H24.103c-7.498 0-13.194-6.807-11.807-14.176C33.933 94.924 134.813 8 256 8c66.448 0 126.791 26.136 171.315 68.685L463.03 40.97C478.149 25.851 504 36.559 504 57.941V192c0 13.255-10.745 24-24 24H345.941c-21.382 0-32.09-25.851-16.971-40.971l41.75-41.749zM32 296h134.059c21.382 0 32.09 25.851 16.971 40.971l-41.75 41.75c31.262 29.273 71.835 45.319 114.876 45.28 77.418-.07 144.315-53.144 162.787-126.849 1.344-5.363 6.122-9.15 11.651-9.15h57.304c7.498 0 13.194 6.807 11.807 14.176C478.067 417.076 377.187 504 256 504c-66.448 0-126.791-26.136-171.315-68.685L48.97 471.03C33.851 486.149 8 475.441 8 454.059V320c0-13.255 10.745-24 24-24z\"></path>\n            </svg>\n          )\n        ) : (\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 352 512\" fill=\"currentColor\" width=\"12\" height=\"12\">\n            <path d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"></path>\n          </svg>\n        )}\n      </button>\n    </div>\n  );\n});\n\nDisconnectWallet.displayName = 'DisconnectWallet';","import React, { memo } from 'react';\nimport { AccountSelectionProps } from '../../types';\n\nexport const AccountSelector = memo(({\n  selectedWallet, \n  enabledAccounts, \n  onAccountSelect \n}: AccountSelectionProps) => {\n  return (\n    <>\n      <br />\n      {selectedWallet && (\n        <button\n          className=\"aw-text-lg aw-mt-3 aw-w-full aw-font-thin aw-bg-darker aw-text-left aw-rounded-xl aw-p-8\"\n        >\n          <div className=\"aw-flex-row\">\n            <img\n              alt={selectedWallet.title}\n              height={20}\n              width={20}\n              src={selectedWallet.logo.src}\n              className=\"aw-mr-4\"\n            />\n            {selectedWallet.title}\n          </div>\n        </button>\n      )}\n      \n      <p className=\"aw-text-white aw-my-3 aw-mt-4 aw-text-opacity-70 aw-font-light aw-text-sm aw-flex-row aw-items-center aw-justify-center aw-space-x-2\">\n        <span>Select Accounts</span>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"aw-h-4 aw-w-4\">\n          <circle cx=\"12\" cy=\"12\" r=\"10\" />\n          <polyline points=\"8 12 12 16 16 12\" />\n          <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"16\" />\n        </svg>\n      </p>\n\n      <div className=\"aw-flex-col aw-gap-2 aw-max-h-48 aw-overflow-y-scroll aw-overflow-x-hidden aw-pt-2\">\n        {enabledAccounts.map((account, index) => (\n          <button\n            key={index}\n            onClick={() => onAccountSelect(account)}\n            className=\"aw-flex-row aw-items-center aw-justify-between aw-bg-darker aw-rounded-xl aw-h-14 aw-p-4 aw-button\"\n          >\n            <div className=\"aw-flex-row aw-items-center aw-justify-start aw-mx-auto aw-w-full\">\n              <div className=\"aw-text-white aw-text-opacity-90 aw-space-x-2 aw-text-md aw-flex-row aw-items-center aw-justify-start\">\n                <p>{\"> \"}</p>\n                <p className=\"aw-font-semibold aw-text-xl aw-cursor-pointer\">\n                  {account.name?.length! > 12\n                    ? account.name?.slice(0, 12) + \"...\"\n                    : account.name}\n                </p>\n                <p className=\"aw-text-blue\">\n                  {\" \"}\n                  (\n                  {account.address.slice(0, 6) +\n                    \"...\" +\n                    account.address.slice(-4)}\n                  )\n                </p>\n              </div>\n            </div>\n          </button>\n        ))}\n      </div>\n    </>\n  );\n});\n\nAccountSelector.displayName = 'AccountSelector';","import {\n  Wallet,\n  WalletAccount,\n  getWalletBySource,\n} from \"@talismn/connect-wallets\";\nimport { ApiPromise } from \"avail-js-sdk\";\nimport { UpdateMetadataParams } from \"./types\";\nimport { initialize, disconnect } from \"avail-js-sdk\";\n\n/**\n * @description Get injected metadata for extrinsic call\n *\n * @param api\n * @returns injected metadata\n */\nexport const getInjectorMetadata = (api: ApiPromise) => {\n  return {\n    chain: api.runtimeChain.toString(),\n    specVersion: api.runtimeVersion.specVersion.toNumber(),\n    tokenDecimals: api.registry.chainDecimals[0] || 18,\n    tokenSymbol: api.registry.chainTokens[0] || \"AVAIL\",\n    genesisHash: api.genesisHash.toHex(),\n    ss58Format:\n      typeof api.registry.chainSS58 === \"number\" ? api.registry.chainSS58 : 0,\n    chainType: \"substrate\" as \"substrate\",\n    icon: \"substrate\",\n    types: {} as any,\n    userExtensions: [] as any,\n  };\n};\n\nexport async function updateMetadata({\n  api,\n  account,\n  metadataCookie,\n  selectedWallet,\n  setCookie,\n}: UpdateMetadataParams) {\n  const injector = getWalletBySource(account.source);\n\n  let retriedApiConn: ApiPromise | null = null;\n  let showError: Function | null = null;\n\n  if (!api || !api.isConnected || !(await api.isReady)) {\n    console.debug(\"API not ready, cannot update metadata\");\n    return;\n  }\n\n  if (\n    injector &&\n    (!metadataCookie ||\n      (metadataCookie ? metadataCookie.wallet !== selectedWallet.title : true))\n  ) {\n    try {\n      const metadata = getInjectorMetadata(api);\n      await injector.extension.metadata.provide(metadata);\n      setCookie(\n        \"metadataUpdated\",\n        {\n          wallet: selectedWallet.title,\n          updated: true,\n        },\n        {}\n      );\n    } catch (e) {\n      console.error(\"Failed to update metadata\", e);\n    }\n  }\n}\n\nexport const initApi = async (\n  rpcUrl: string,\n  retries = 3,\n): Promise<ApiPromise> => {\n  try {\n    console.log(`Initializing API. Retries left: ${retries}`);\n    const initializedApi = await initialize(rpcUrl);\n    return initializedApi;\n  } catch (error) {\n    disconnect();\n    if (retries > 0) {\n      await new Promise((resolve) => setTimeout(resolve, 2000));\n      console.debug(`Retrying to initialize API. Retries left: ${retries}`);\n      return initApi(rpcUrl, retries - 1);\n    } else {\n      throw new Error(`RPC_INITIALIZE_ERROR: ${error}`);\n    }\n  }\n};\n","import React, { memo } from 'react';\nimport { WalletSelectionProps } from '../../types';\nimport { Wallet } from '@talismn/connect-wallets';\n\nexport const WalletSelector = memo(({\n  supportedWallets, \n  onWalletSelect, \n  metamaskInstalled \n}: WalletSelectionProps) => {\n  const sortedWallets = React.useMemo(() => \n    supportedWallets.sort((a, b) => {\n      if (a.title === \"SubWallet\") return -1;\n      if (b.title === \"SubWallet\") return 1;\n      return 0;\n    }), \n    [supportedWallets]\n  );\n\n  return (\n    <div className=\"aw-flex-col aw-gap-3 aw-max-h-72 aw-overflow-y-scroll\">\n      {/* Metamask Snap Button */}\n      <button\n        disabled={!metamaskInstalled}\n        className=\"aw-text-lg aw-font-thin aw-bg-darker aw-text-left aw-rounded-xl aw-p-8 aw-button\"\n        onClick={() => onWalletSelect({ title: 'MetamaskSnap' } as Wallet)}\n        key=\"Metamask\"\n      >\n        <div className=\"aw-flex-row\">\n          <img\n            alt=\"Metamask Snap\"\n            src=\"/images/availsnap.png\"\n            width=\"24\" \n            height=\"24\"\n            className=\"aw-mr-4 aw-h-6 aw-w-6\"\n          />\n          Avail Snap\n        </div>\n      </button>\n\n      {/* Other Wallets */}\n      {sortedWallets.map((wallet: Wallet) => (\n        <button\n          key={wallet.title}\n          disabled={!wallet.installed}\n          className=\"aw-text-lg aw-font-thin aw-bg-darker aw-text-left aw-rounded-xl aw-p-8 aw-button\"\n          onClick={() => onWalletSelect(wallet)}\n        >\n          <div className=\"aw-flex-row\">\n            <img\n              alt={wallet.title}\n              height=\"20\"\n              width=\"20\"\n              src={wallet.logo.src}\n              className=\"aw-mr-4\"\n            />\n            {wallet.title}\n          </div>\n        </button>\n      ))}\n    </div>\n  );\n});\n\nWalletSelector.displayName = 'WalletSelector';","import { Wallet, WalletAccount } from \"@talismn/connect-wallets\";\nimport { create } from 'zustand';\nimport { persist, createJSONStorage } from 'zustand/middleware';\n\ninterface AvailWallet {\n  selected: WalletAccount | null;\n  setSelected: (selected: WalletAccount | null) => void;\n  selectedWallet: Wallet | null;\n  setSelectedWallet: (selectedWallet: Wallet | null) => void;\n  metadataUpdated: boolean;\n  setMetadataUpdated: (updated: boolean) => void;\n  clearWalletState: () => void;\n}\n\nexport const useAvailAccount = create<AvailWallet>()(\n  persist(\n    (set) => ({\n      selected: null,\n      setSelected: (selected) => set({ selected }),\n      selectedWallet: null,\n      setSelectedWallet: (selectedWallet) => set({ selectedWallet }),\n      metadataUpdated: false,\n      setMetadataUpdated: (updated) => set({ metadataUpdated: updated }),\n      clearWalletState: () => set({ \n        selected: null, \n        selectedWallet: null, \n        metadataUpdated: false \n      }),\n    }),\n    {\n      name: 'avail-wallet-storage',\n      storage: createJSONStorage(() => localStorage),\n      partialize: (state) => ({\n        selected: state.selected,\n        selectedWallet: state.selectedWallet,\n        metadataUpdated: state.metadataUpdated,\n      }),\n    }\n  )\n);\n","import { ApiPromise } from \"avail-js-sdk\";\nimport { create } from \"zustand\";\n\ninterface Api {\n  api?: ApiPromise;\n  isReady: boolean;\n  setApi: (api: ApiPromise) => void;\n  ensureConnection: (initApiFn: () => Promise<ApiPromise>) => Promise<void>;\n}\n\nexport const useApi = create<Api>((set, get) => ({\n  api: undefined,\n  isReady: false,\n  setApi: (api) => set({ api }),\n  ensureConnection: async (initApiFn) => {\n    const currentApi = get().api;\n\n    if (currentApi?.isConnected && (await currentApi.isReady)) {\n      set({ isReady: true });\n      return;\n    }\n\n    try {\n      const AvailApi = await initApiFn();\n      AvailApi.on(\"ready\", () => {\n        set({ isReady: true });\n      });\n\n      AvailApi.on(\"disconnected\", async () => {\n        set({ isReady: false });\n        // Retry connection after disconnection\n        setTimeout(() => get().ensureConnection(initApiFn), 5000);\n      });\n\n      set({\n        api: AvailApi,\n        isReady: true,\n      });\n\n      return;\n    } catch (error) {\n      console.error(\"API_INTIALIZATION_ERROR\", error);\n      set({ isReady: false });\n      // Retry after 5 seconds on failure\n      setTimeout(() => get().ensureConnection(initApiFn), 5000);\n    }\n  },\n}));\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport { getWallets, Wallet, WalletAccount } from \"@talismn/connect-wallets\";\nimport {\n  useInvokeSnap,\n  useMetaMask,\n  useRequestSnap,\n} from \"../../hooks/metamask\";\nimport { DisconnectWallet } from \"./DisconnectWallet\";\nimport { AccountSelector } from \"./AccountSelector\";\nimport { updateMetadata } from \"../../utils\";\nimport { WalletSelector } from \"./WalletSelector\";\nimport { AvailWalletConnectProps, ExtendedWalletAccount } from \"../../types\";\nimport { useAvailAccount } from \"../../stores/availwallet\";\nimport { useApi } from \"../../stores/api\";\n\nexport const AvailWalletConnect: React.FC<AvailWalletConnectProps> = ({\n  api,\n}) => {\n  const [open, setOpen] = useState(false);\n  const [supportedWallets, setSupportedWallets] = useState<Wallet[]>([]);\n  const [enabledAccounts, setEnabledAccounts] = useState<WalletAccount[]>([]);\n  const { api: storeApi } = useApi();\n\n  const requestSnap = useRequestSnap();\n  const invokeSnap = useInvokeSnap();\n\n  const { \n    selected, \n    setSelected, \n    selectedWallet, \n    setSelectedWallet,\n    metadataUpdated,\n    setMetadataUpdated,\n    clearWalletState\n  } = useAvailAccount();\n\n  const { installedSnap, metamaskInstalled } = useMetaMask();\n\n  const getSupportedWallets = useCallback(() => {\n    const wallets = getWallets();\n    setSupportedWallets(wallets);\n    return wallets;\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      const wallets = getSupportedWallets();\n  \n      if (selected?.address && selectedWallet?.title) {\n        if (selectedWallet.title === \"MetamaskSnap\" && installedSnap) {\n          // Reconnect is handled by persistent state\n        } else {\n          const matchedWallet = wallets.find((wallet) => {\n            return wallet.title === selectedWallet?.title;\n          });\n  \n          if (!matchedWallet) {\n            return;\n          }\n  \n          (matchedWallet.enable(\"bridge-ui\") as any).then(() => {\n            matchedWallet.getAccounts().then((accounts: WalletAccount[]) => {\n              const enabledAccounts = (\n                accounts as ExtendedWalletAccount[]\n              ).filter((account) => {\n                return account.type! !== \"ethereum\";\n              });\n              const selectedAccount = enabledAccounts.find(\n                (account) => account.address === selected?.address\n              );\n  \n              if (!selectedAccount) {\n                return;\n              }\n  \n              setEnabledAccounts(enabledAccounts);\n            });\n          });\n        }\n      }\n    })();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    installedSnap,\n    metamaskInstalled,\n    getSupportedWallets\n  ]);\n\n  const handleWalletSelect = useCallback(\n    async (wallet: Wallet) => {\n      if (wallet.title === \"MetamaskSnap\") {\n        try {\n          await requestSnap();\n          const address = await invokeSnap({ method: \"getAddress\" });\n          setSelected({ address: address as string, source: \"MetamaskSnap\" });\n          setSelectedWallet({ title: 'MetamaskSnap' } as Wallet);\n        } catch (error) {\n          console.error(\"Failed to connect to Avail Snap\", error);\n        }\n      } else {\n        setSelectedWallet(wallet);\n        await wallet.enable(\"avail-wallet\");\n        const accounts = await wallet.getAccounts();\n        const substrateAccounts = accounts.filter(\n          //@ts-expect-error - type is not defined in the WalletAccount interface but it exists\n          (account) => account.type !== \"ethereum\",\n        );\n        setEnabledAccounts(substrateAccounts);\n      }\n    },\n    [\n      invokeSnap,\n      requestSnap,\n      setSelected,\n      setSelectedWallet,\n    ],\n  );\n\n  const handleAccountSelect = useCallback(\n    async (account: WalletAccount) => {\n      setSelected(account);\n\n      const currentApi = api || storeApi;\n      if (currentApi && selectedWallet) {\n        await updateMetadata({\n          api: currentApi,\n          account,\n          metadataCookie: metadataUpdated,\n          selectedWallet: selectedWallet,\n          setCookie: (name: string, value: any, options: any) => {\n            if (name === 'metadataUpdated') {\n              setMetadataUpdated(value);\n            }\n          },\n        });\n      }\n\n      setOpen(false);\n      console.info(\n        `AVAIL_WALLET_CONNECT - ${selectedWallet?.title} - ${account.address}`,\n      );\n    },\n    [selectedWallet, api, storeApi, metadataUpdated, setMetadataUpdated, setSelected],\n  );\n\n  const handleDisconnect = useCallback(() => {\n    clearWalletState();\n    setEnabledAccounts([]);\n  }, [clearWalletState]);\n\n  return (\n    <>\n      {selected ? (\n        <DisconnectWallet\n          selected={selected}\n          installedSnap={installedSnap}\n          onDisconnect={handleDisconnect}\n        />\n      ) : (\n        <div>\n          <button\n            onClick={() => setOpen(!open)}\n            className=\"aw-button aw-button-primary aw-ml-2\"\n          >\n            Connect Wallet\n          </button>\n\n          {open && (\n            <div className=\"aw-dialog-overlay\">\n              <div\n                className=\"fixed inset-0 bg-black/50\"\n                onClick={() => setOpen(false)}\n              ></div>\n              <div className=\"aw-dialog-content\">\n                <div className=\"aw-bg-dark aw-border-2 aw-border-darker aw-rounded-xl p-4\">\n                  <div>\n                    <h2 className=\"aw-font-bold aw-text-3xl aw-text-white\">\n                      Connect Wallet\n                    </h2>\n\n                    {enabledAccounts.length === 0 ? (\n                      <>\n                        <p className=\"aw-text-md aw-text-white aw-text-opacity-70 aw-pt-2\">\n                          <div className=\"aw-flex-row aw-items-start aw-justify-start aw-pt-3 aw-space-x-2\">\n                            <svg\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              width=\"24\"\n                              height=\"24\"\n                              viewBox=\"0 0 24 24\"\n                              fill=\"none\"\n                              stroke=\"currentColor\"\n                              strokeWidth=\"2\"\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                            >\n                              <circle cx=\"12\" cy=\"12\" r=\"10\" />\n                              <line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\" />\n                              <line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\" />\n                            </svg>\n                            <span>\n                              Don&apos;t have an Avail Wallet yet? Checkout this{\" \"}\n                              <a\n                                href=\"https://docs.availspace.app/avail-space/web-dashboard-user-guide/getting-started/how-to-install-subwallet-and-create-a-new-avail-account?utm_source=avail&utm_medium=docspace&utm_campaign=avlclaim\"\n                                className=\"aw-underline\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                              >\n                                cool tutorial\n                              </a>{\" \"}\n                              by Subwallet.\n                            </span>\n                          </div>\n                        </p>\n                        <div className=\"pb-3\" />\n                        <WalletSelector\n                          supportedWallets={supportedWallets}\n                          onWalletSelect={handleWalletSelect}\n                          metamaskInstalled={metamaskInstalled}\n                        />\n                      </>\n                    ) : (\n                      <AccountSelector\n                        selectedWallet={selectedWallet}\n                        enabledAccounts={enabledAccounts}\n                        onAccountSelect={handleAccountSelect}\n                      />\n                    )}\n                  </div>\n                  <div className=\"flex w-full mt-2 text-white text-opacity-70 !flex-col !items-center !justify-center\">\n                    <div>\n                      {enabledAccounts && enabledAccounts.length > 0 ? (\n                        <button\n                          disabled={enabledAccounts.length <= 0}\n                          className=\"aw-bg-dark aw-button aw-button-outline\"\n                          onClick={() => {\n                            setEnabledAccounts([]);\n                            setSelected(null);\n                          }}\n                        >\n                          <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            width=\"24\"\n                            height=\"24\"\n                            viewBox=\"0 0 24 24\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"2\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            className=\"aw-h-7 aw-w-7 aw-pr-2 inline-block\"\n                          >\n                            <path d=\"m12 19-7-7 7-7\" />\n                            <path d=\"M19 12H5\" />\n                          </svg>\n                          <span className=\"aw-text-lg\">Go back to wallets</span>\n                        </button>\n                      ) : (\n                        <p>Scroll to find more wallets</p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { ApiPromise } from \"avail-js-sdk\";\nimport { getWallets } from \"@talismn/connect-wallets\";\nimport { MetaMaskProvider } from \"../../hooks/metamask\";\nimport { AvailWalletProviderProps, ExtendedWalletAccount } from \"../../types\";\nimport { useAvailAccount } from \"../../stores/availwallet\";\nimport { useApi } from \"../../stores/api\";\nimport { initApi } from \"../../utils\";\n\ninterface AvailWalletContextType {\n  api?: ApiPromise;\n  isConnected: boolean;\n  rpcUrl?: string;\n  setRpcUrl: (url: string) => void;\n}\n\nconst AvailWalletContext = createContext<AvailWalletContextType>({\n  isConnected: false,\n  setRpcUrl: () => {},\n});\n\nexport const useAvailWallet = () => useContext(AvailWalletContext);\n\nexport const AvailWalletProvider: React.FC<\n  AvailWalletProviderProps & { rpcUrl?: string }\n> = ({ children, api: externalApi, rpcUrl: userProvidedRpcUrl }) => {\n  const DEFAULT_RPC_URL = \"wss://turing-rpc.avail.so/\";\n  const [rpcUrl, setRpcUrl] = useState<string>(\n    userProvidedRpcUrl || DEFAULT_RPC_URL,\n  );\n\n  const { \n    selected, \n    setSelected, \n    selectedWallet, \n    setSelectedWallet,\n    metadataUpdated \n  } = useAvailAccount();\n\n  const { api, isReady, setApi, ensureConnection } = useApi();\n\n  // Initialize API\n  useEffect(() => {\n    if (externalApi) {\n      setApi(externalApi);\n      return;\n    }\n\n    if (!rpcUrl) return;\n\n    const initializeApi = async () => {\n      await ensureConnection(() => initApi(rpcUrl));\n    };\n\n    initializeApi();\n  }, [rpcUrl, externalApi, setApi, ensureConnection]);\n\n  // Load persisted wallet data\n  useEffect(() => {\n    const loadPersistedWallet = async () => {\n      if (!selected?.address || !selectedWallet?.title || !isReady) {\n        return;\n      }\n\n      if (selectedWallet.title !== \"MetamaskSnap\") {\n        const wallets = getWallets();\n        const savedWallet = wallets.find(\n          (wallet) => wallet.title === selectedWallet.title,\n        );\n\n        if (!savedWallet) return;\n\n        try {\n          await savedWallet.enable(\"avail-wallet\");\n          const accounts = await savedWallet.getAccounts();\n          const substrateAccounts = (\n            accounts as ExtendedWalletAccount[]\n          ).filter((account) => account.type !== \"ethereum\");\n\n          const savedAccount = substrateAccounts.find(\n            (account) => account.address === selected.address,\n          );\n\n          if (savedAccount) {\n            setSelectedWallet(savedWallet);\n            setSelected(savedAccount);\n          }\n        } catch (error) {\n          console.error(\"Failed to reconnect wallet:\", error);\n        }\n      }\n    };\n\n    loadPersistedWallet();\n  }, [\n    selected,\n    selectedWallet,\n    isReady,\n    setSelected,\n    setSelectedWallet,\n  ]);\n\n  return (\n    <MetaMaskProvider>\n      <AvailWalletContext.Provider\n        value={{\n          api: api,\n          isConnected: isReady,\n          rpcUrl: rpcUrl,\n          setRpcUrl,\n        }}\n      >\n        {children}\n      </AvailWalletContext.Provider>\n    </MetaMaskProvider>\n  );\n};\n"],"names":["async","hasSnapsSupport","provider","window","ethereum","request","method","_a","process","env","SNAP_ORIGIN","MetaMaskContext","createContext","installedSnap","error","setInstalledSnap","setError","MetaMaskProvider","children","setProvider","useState","useEffect","detected","_b","providers","getSnapsProvider","then","catch","console","timeout","setTimeout","clearTimeout","React","Provider","value","useMetaMaskContext","useContext","defaultSnapOrigin","useRequest","context","params","useMetaMask","isFlask","setIsFlask","metamaskInstalled","setMetamaskInstalled","isMetaMaskInstalled","Boolean","isMetaMask","detectMetaMask","snapsDetected","getSnap","snaps","detect","useInvokeSnap","snapId","useRequestSnap","version","DisconnectWallet","memo","selected","onDisconnect","className","onClick","navigator","clipboard","writeText","address","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","source","slice","displayName","AccountSelector","selectedWallet","enabledAccounts","onAccountSelect","Fragment","alt","title","src","logo","cx","cy","r","points","x1","y1","x2","y2","map","account","index","key","name","length","getInjectorMetadata","api","chain","runtimeChain","toString","specVersion","runtimeVersion","toNumber","tokenDecimals","registry","chainDecimals","tokenSymbol","chainTokens","genesisHash","toHex","ss58Format","chainSS58","chainType","icon","types","userExtensions","updateMetadata","metadataCookie","setCookie","injector","getWalletBySource","isConnected","isReady","wallet","metadata","extension","provide","updated","e","debug","initApi","rpcUrl","retries","log","initialize","disconnect","Promise","resolve","Error","WalletSelector","supportedWallets","onWalletSelect","sortedWallets","useMemo","sort","a","b","disabled","installed","useAvailAccount","create","persist","set","setSelected","setSelectedWallet","metadataUpdated","setMetadataUpdated","clearWalletState","storage","createJSONStorage","localStorage","partialize","state","useApi","get","undefined","setApi","ensureConnection","initApiFn","currentApi","AvailApi","on","AvailWalletConnect","open","setOpen","setSupportedWallets","setEnabledAccounts","storeApi","requestSnap","invokeSnap","getSupportedWallets","useCallback","wallets","getWallets","matchedWallet","find","enable","getAccounts","accounts","filter","type","handleWalletSelect","substrateAccounts","handleAccountSelect","options","info","handleDisconnect","href","target","rel","AvailWalletContext","setRpcUrl","useAvailWallet","AvailWalletProvider","externalApi","userProvidedRpcUrl","initializeApi","savedWallet","savedAccount","loadPersistedWallet"],"mappings":"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"}