{"version":3,"file":"index.js","sources":["../src/hooks/metamask/utils/index.ts","../src/hooks/metamask/MetamaskContext.tsx","../src/hooks/metamask/index.ts","../src/components/wallets/DisconnectWallet.tsx","../src/components/wallets/AccountSelector.tsx","../src/utils.ts","../src/components/wallets/WalletSelector.tsx","../src/stores/availwallet.ts","../src/stores/api.ts","../src/components/wallets/AvailWalletProvider.tsx","../src/components/wallets/AvailWalletConnect.tsx"],"sourcesContent":["// Explicitly retype MetaMaskInpageProvider to avoid import issues\nimport type { MetaMaskInpageProvider } from '@metamask/providers';\n\n// Add ethereum to Window interface\ndeclare global {\n  interface Window {\n    ethereum?: MetaMaskInpageProvider & {\n      detected?: MetaMaskInpageProvider[];\n      providers?: MetaMaskInpageProvider[];\n    };\n  }\n}\n\n/**\n * Check if the current provider supports snaps by calling `wallet_getSnaps`.\n */\nexport async function hasSnapsSupport(\n  provider: MetaMaskInpageProvider = window.ethereum as MetaMaskInpageProvider,\n) {\n  try {\n    await provider.request({\n      method: 'wallet_getSnaps',\n    });\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get a provider that supports snaps.\n */\nexport async function getSnapsProvider() {\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  if (window.ethereum && await hasSnapsSupport(window.ethereum as MetaMaskInpageProvider)) {\n    return window.ethereum as MetaMaskInpageProvider;\n  }\n\n  if (window.ethereum?.detected) {\n    for (const provider of window.ethereum.detected) {\n      if (await hasSnapsSupport(provider)) {\n        return provider;\n      }\n    }\n  }\n\n  if (window.ethereum?.providers) {\n    for (const provider of window.ethereum.providers) {\n      if (await hasSnapsSupport(provider)) {\n        return provider;\n      }\n    }\n  }\n\n  return null;\n}\n\n/**\n * Check if a snap ID is a local snap ID.\n */\nexport const isLocalSnap = (snapId: string) => snapId.startsWith('local:');\n\n// Set a default snap origin\nexport const defaultSnapOrigin = process.env.SNAP_ORIGIN ?? `npm:@avail-project/avail-snap`;","import type { MetaMaskInpageProvider } from '@metamask/providers';\nimport type { ReactNode } from 'react';\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { Snap } from '../metamask';\nimport { getSnapsProvider } from './utils';\n\n\ntype MetaMaskContextType = {\n  provider: MetaMaskInpageProvider | null;\n  installedSnap: Snap | null;\n  error: Error | null;\n  setInstalledSnap: (snap: Snap | null) => void;\n  setError: (error: Error) => void;\n};\n\nexport const MetaMaskContext = createContext<MetaMaskContextType>({\n  provider: null,\n  installedSnap: null,\n  error: null,\n  setInstalledSnap: () => {\n    /* no-op */\n  },\n  setError: () => {\n    /* no-op */\n  },\n});\n\n/**\n * MetaMask context provider to handle MetaMask and snap status.\n *\n * @param props - React Props.\n * @param props.children - React component to be wrapped by the Provider.\n * @returns JSX.\n */\nexport const MetaMaskProvider = ({ children }: { children: ReactNode }) => {\n  const [provider, setProvider] = useState<MetaMaskInpageProvider | null>(null);\n  const [installedSnap, setInstalledSnap] = useState<Snap | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    getSnapsProvider().then(setProvider).catch(console.error);\n  }, []);\n\n  useEffect(() => {\n    if (error) {\n      const timeout = setTimeout(() => {\n        setError(null);\n      }, 10000);\n\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n\n    return undefined;\n  }, [error]);\n\n  return (\n    <MetaMaskContext.Provider\n      value={{ provider, error, setError, installedSnap, setInstalledSnap }}\n    >\n      {children}\n    </MetaMaskContext.Provider>\n  );\n};\n\n/**\n * Utility hook to consume the MetaMask context.\n *\n * @returns The MetaMask context.\n */\nexport function useMetaMaskContext() {\n  return useContext(MetaMaskContext);\n}","import { MetaMaskContext, MetaMaskProvider, useMetaMaskContext } from './MetamaskContext';\n\n// Re-export types\nexport type Snap = {\n  permissionName: string;\n  id: string;\n  version: string;\n  initialPermissions: Record<string, unknown>;\n};\n\nexport type GetSnapsResponse = Record<string, Snap>;\n\nexport type InvokeSnapParams = {\n  method: string;\n  params?: Record<string, unknown>;\n};\n\nexport type Request = (params: { method: string; params?: any }) => Promise<unknown | null>;\n\n// Default snap origin\nexport const defaultSnapOrigin = process.env.SNAP_ORIGIN ?? `npm:@avail-project/avail-snap`;\n\n// Export context components\nexport { MetaMaskContext, MetaMaskProvider, useMetaMaskContext };\n\n// Define hooks here instead of importing\n\nexport function useRequest(): Request {\n  const context = useMetaMaskContext();\n  \n  return async ({ method, params }) => {\n    try {\n      const data = await context.provider?.request({\n        method,\n        params,\n      }) ?? null;\n\n      return data;\n    } catch (error) {\n      context.setError(error as Error);\n      return null;\n    }\n  };\n}\n\nexport function useMetaMask() {\n  const { provider, setInstalledSnap, installedSnap } = useMetaMaskContext();\n  const request = useRequest();\n  const [isFlask, setIsFlask] = useState(false);\n  const [metamaskInstalled, setMetamaskInstalled] = useState(false);\n\n  useEffect(() => {\n    const detectMetaMask = () => {\n      if (typeof window === 'undefined') {\n        return;\n      }\n      \n      const { ethereum } = window as any;\n      const isMetaMaskInstalled = Boolean(ethereum && ethereum.isMetaMask);\n      setMetamaskInstalled(isMetaMaskInstalled);\n    };\n\n    detectMetaMask();\n  }, []);\n\n  const snapsDetected = provider !== null;\n\n  const detectFlask = async () => {\n    const clientVersion = await request({\n      method: 'web3_clientVersion',\n    });\n\n    const isFlaskDetected = (clientVersion as string[])?.includes('flask');\n    setIsFlask(isFlaskDetected);\n  };\n\n  const detectMetaMask = () => {\n    const { ethereum } = window as any;\n    return Boolean(ethereum && ethereum.isMetaMask);\n  };\n\n  const getSnap = async () => {\n    const snaps = (await request({\n      method: 'wallet_getSnaps',\n    })) as GetSnapsResponse;\n\n    setInstalledSnap(snaps[defaultSnapOrigin] ?? null);\n  };\n\n  useEffect(() => {\n    const detect = async () => {\n      if (provider) {\n        await detectMetaMask();\n        await getSnap();\n      }\n    };\n\n    detect().catch(console.error);\n  }, [provider]);\n\n  return { isFlask, snapsDetected, installedSnap, getSnap, detectMetaMask, metamaskInstalled };\n}\n\nexport function useInvokeSnap(snapId = defaultSnapOrigin) {\n  const request = useRequest();\n\n  const invokeSnap = async ({ method, params }: InvokeSnapParams) =>\n    request({\n      method: 'wallet_invokeSnap',\n      params: {\n        snapId,\n        request: params ? { method, params } : { method },\n      },\n    });\n\n  return invokeSnap;\n}\n\nexport function useRequestSnap(\n  snapId = defaultSnapOrigin,\n  version?: string,\n) {\n  const request = useRequest();\n  const { setInstalledSnap } = useMetaMaskContext();\n\n  const requestSnap = async () => {\n    const snaps = (await request({\n      method: 'wallet_requestSnaps',\n      params: {\n        [snapId]: version ? { version } : {},\n      },\n    })) as Record<string, Snap>;\n\n    setInstalledSnap(snaps?.[snapId] ?? null);\n  };\n\n  return requestSnap;\n}\n\n// Import React for useState and useEffect\nimport { useState, useEffect } from 'react';","import React, { memo } from 'react';\nimport { DisconnectWalletProps } from '../../types';\n\nexport const DisconnectWallet = memo(({\n  selected, \n  installedSnap, \n  onDisconnect \n}: DisconnectWalletProps) => {\n  if (!selected) return null;\n\n  return (\n    <div\n      className=\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-avail text-avail-foreground shadow hover:bg-avail/90 h-8 rounded-full px-3 cursor-pointer\"\n      onClick={() => {\n        navigator.clipboard.writeText(selected.address);\n      }}\n    >\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"pr-1 h-5 w-5\">\n        <path d=\"M21 12V7H5a2 2 0 0 1 0-4h14v4\"/>\n        <path d=\"M3 5v14a2 2 0 0 0 2 2h16v-5\"/>\n        <path d=\"M18 9a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h4v-8Z\"/>\n      </svg>\n      {selected.source === \"MetamaskSnap\"\n        ? installedSnap\n          ? selected.address.slice(0, 6) + \"...\" + selected.address?.slice(-4)\n          : \"Retry Connecting\"\n        : selected.address.slice(0, 6) + \"...\" + selected.address?.slice(-4)}\n      \n      <button className=\"ml-2\" onClick={onDisconnect}>\n        {selected.source === \"MetamaskSnap\" ? (\n          installedSnap ? (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 352 512\" fill=\"currentColor\" width=\"12\" height=\"12\">\n              <path d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"></path>\n            </svg>\n          ) : (\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" fill=\"currentColor\" width=\"12\" height=\"12\">\n              <path d=\"M370.72 133.28C339.458 104.008 298.888 87.962 255.848 88c-77.458.068-144.328 53.178-162.791 126.85-1.344 5.363-6.122 9.15-11.651 9.15H24.103c-7.498 0-13.194-6.807-11.807-14.176C33.933 94.924 134.813 8 256 8c66.448 0 126.791 26.136 171.315 68.685L463.03 40.97C478.149 25.851 504 36.559 504 57.941V192c0 13.255-10.745 24-24 24H345.941c-21.382 0-32.09-25.851-16.971-40.971l41.75-41.749zM32 296h134.059c21.382 0 32.09 25.851 16.971 40.971l-41.75 41.75c31.262 29.273 71.835 45.319 114.876 45.28 77.418-.07 144.315-53.144 162.787-126.849 1.344-5.363 6.122-9.15 11.651-9.15h57.304c7.498 0 13.194 6.807 11.807 14.176C478.067 417.076 377.187 504 256 504c-66.448 0-126.791-26.136-171.315-68.685L48.97 471.03C33.851 486.149 8 475.441 8 454.059V320c0-13.255 10.745-24 24-24z\"></path>\n            </svg>\n          )\n        ) : (\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 352 512\" fill=\"currentColor\" width=\"12\" height=\"12\">\n            <path d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"></path>\n          </svg>\n        )}\n      </button>\n    </div>\n  );\n});\n\nDisconnectWallet.displayName = 'DisconnectWallet';","import React, { memo } from 'react';\nimport { AccountSelectionProps } from '../../types';\n\nexport const AccountSelector = memo(({\n  selectedWallet, \n  enabledAccounts, \n  onAccountSelect \n}: AccountSelectionProps) => {\n  return (\n    <>\n    <br/>\n      {selectedWallet && (\n        <button\n          className=\"!text-lg mt-3 w-full font-thin bg-[#3a3b3cb1] text-left font-ppmori rounded-xl !p-8\"\n        >\n          <div className=\"flex flex-row\">\n            <img\n              alt={selectedWallet.title}\n              height={20}\n              width={20}\n              src={selectedWallet.logo.src}\n              className=\"mr-4\"\n            />\n            {selectedWallet.title}\n          </div>\n        </button>\n      )}\n      \n      <p className=\"text-white my-3 !mt-4 text-opacity-70 font-ppmori font-light text-sm flex flex-row items-center justify-center space-x-2\">\n        <span>Select Accounts</span>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-4 w-4\">\n          <circle cx=\"12\" cy=\"12\" r=\"10\"/>\n          <polyline points=\"8 12 12 16 16 12\"/>\n          <line x1=\"12\" y1=\"8\" x2=\"12\" y2=\"16\"/>\n        </svg>\n      </p>\n\n      <div className=\"flex flex-col gap-2 !max-h-48 overflow-y-scroll overflow-x-hidden pt-2\">\n        {enabledAccounts.map((account, index) => (\n          <button\n            key={index}\n            onClick={() => onAccountSelect(account)}\n            className=\"flex flex-row items-center justify-between bg-[#3a3b3cb1] rounded-xl !h-14 p-4\"\n          >\n            <div className=\"flex flex-row items-center justify-start mx-auto w-full\">\n              <div className=\"text-white text-opacity-90 space-x-2 !font-thicccboiregular text-md flex flex-row items-center justify-start\">\n                <p>{\"> \"}</p>\n                <p className=\"font-thicccboisemibold text-xl cursor-pointer\">\n                  {account.name?.length! > 12\n                    ? account.name?.slice(0, 12) + \"...\"\n                    : account.name}\n                </p>\n                <p className=\"text-[#3489E8]\">\n                  {\" \"}\n                  (\n                  {account.address.slice(0, 6) +\n                    \"...\" +\n                    account.address.slice(-4)}\n                  )\n                </p>\n              </div>\n            </div>\n          </button>\n        ))}\n      </div>\n    </>\n  );\n});\n\nAccountSelector.displayName = 'AccountSelector';","import { Wallet, WalletAccount, getWalletBySource } from \"@talismn/connect-wallets\";\nimport { ApiPromise } from \"avail-js-sdk\";\nimport { UpdateMetadataParams } from \"./types\";\n\n/**\n * @description Get injected metadata for extrinsic call\n *\n * @param api\n * @returns injected metadata\n */\nexport const getInjectorMetadata = (api: ApiPromise) => {\n  return {\n    chain: api.runtimeChain.toString(),\n    specVersion: api.runtimeVersion.specVersion.toNumber(),\n    tokenDecimals: api.registry.chainDecimals[0] || 18,\n    tokenSymbol: api.registry.chainTokens[0] || \"AVAIL\",\n    genesisHash: api.genesisHash.toHex(),\n    ss58Format: typeof api.registry.chainSS58 === 'number' ? api.registry.chainSS58 : 0,\n    chainType: \"substrate\" as \"substrate\",\n    icon: \"substrate\",\n    types: {} as any,\n    userExtensions: [] as any,\n  };\n};\n\nexport async function updateMetadata({\n    api, \n    account,\n    metadataCookie,\n    selectedWallet,\n    setCookie\n} : UpdateMetadataParams) {\n    const injector = getWalletBySource(account.source);\n\n    let retriedApiConn: ApiPromise | null = null;\n    let showError: Function | null = null;\n\n    if (!api || !api.isConnected || !(await api.isReady)) {\n      console.debug(\"API not ready, cannot update metadata\");\n      return;\n    }\n          \n    if (\n      injector &&\n      (!metadataCookie ||\n        (metadataCookie\n          ? metadataCookie.wallet !==\n              selectedWallet.title\n          : true))\n    ) {\n      try {\n        const metadata = getInjectorMetadata(api);\n        await injector.extension.metadata.provide(metadata);\n        setCookie(\n          \"metadataUpdated\",\n          {\n            wallet: selectedWallet.title,\n            updated: true,\n          },\n          {\n            path: \"/\",\n            sameSite: true,\n          }\n        );\n      } catch (e) {\n        console.error(\"Failed to update metadata\", e);\n      }\n    }\n}\n\nexport const initApi = async (rpcUrl: string, retries = 3): Promise<ApiPromise> => {\n  try {\n    console.log(`Initializing API. Retries left: ${retries}`);\n    // This is a placeholder - in the actual implementation, you'd need to access\n    // the avail-js-sdk's initialize function\n    // @ts-ignore\n    const initializedApi = await window.availJsSdk.initialize({\n      endpoint: rpcUrl\n    });\n    return initializedApi;\n  } catch (error) {\n    // @ts-ignore\n    window.availJsSdk.disconnect();\n    if (retries > 0) {\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      console.debug(`Retrying to initialize API. Retries left: ${retries}`);\n      return initApi(rpcUrl, retries - 1);\n    } else {\n      throw new Error(`RPC_INITIALIZE_ERROR: ${error}`);\n    }\n  }\n};","import React, { memo } from 'react';\nimport { WalletSelectionProps } from '../../types';\nimport { Wallet } from '@talismn/connect-wallets';\n\nexport const WalletSelector = memo(({\n  supportedWallets, \n  onWalletSelect, \n  metamaskInstalled \n}: WalletSelectionProps) => {\n  const sortedWallets = React.useMemo(() => \n    supportedWallets.sort((a, b) => {\n      if (a.title === \"SubWallet\") return -1;\n      if (b.title === \"SubWallet\") return 1;\n      return 0;\n    }), \n    [supportedWallets]\n  );\n\n  return (\n    <div className=\"flex flex-col gap-3 max-h-72 overflow-y-scroll\">\n      {/* Metamask Snap Button */}\n      <button\n        disabled={!metamaskInstalled}\n        className=\"!text-lg font-thin bg-[#3a3b3cb1] text-left font-ppmori rounded-xl !p-8\"\n        onClick={() => onWalletSelect({ title: 'MetamaskSnap' } as Wallet)}\n        key=\"Metamask\"\n      >\n        <div className=\"flex flex-row\">\n          <img\n            alt=\"Metamask Snap\"\n            src=\"/images/availsnap.png\"\n            width=\"24\" \n            height=\"24\"\n            className=\"mr-4 h-6 w-6\"\n          />\n          Avail Snap\n        </div>\n      </button>\n\n      {/* Other Wallets */}\n      {sortedWallets.map((wallet: Wallet) => (\n        <button\n          key={wallet.title}\n          disabled={!wallet.installed}\n          className=\"!text-lg font-thin bg-[#3a3b3cb1] text-left font-ppmori rounded-xl !p-8\"\n          onClick={() => onWalletSelect(wallet)}\n        >\n          <div className=\"flex flex-row\">\n            <img\n              alt={wallet.title}\n              height=\"20\"\n              width=\"20\"\n              src={wallet.logo.src}\n              className=\"mr-4\"\n            />\n            {wallet.title}\n          </div>\n        </button>\n      ))}\n    </div>\n  );\n});\n\nWalletSelector.displayName = 'WalletSelector';","import { Wallet, WalletAccount } from \"@talismn/connect-wallets\";\nimport { create } from \"zustand\";\n\ninterface AvailWallet {\n  selected: WalletAccount | null;\n  setSelected: (selected: WalletAccount | null) => void;\n  selectedWallet: Wallet | null;\n  setSelectedWallet: (selectedWallet: Wallet | null) => void;\n}\n\nexport const useAvailAccount = create<AvailWallet>((set) => ({\n  selected: null,\n  setSelected: (selected) => set({ selected }),\n  selectedWallet: null,\n  setSelectedWallet: (selectedWallet) => set({ selectedWallet }),\n}));","import { ApiPromise } from \"avail-js-sdk\";\nimport { create } from \"zustand\";\n\ninterface Api {\n  api?: ApiPromise;\n  isReady: boolean;\n  setApi: (api: ApiPromise) => void;\n  ensureConnection: (initApiFn: () => Promise<ApiPromise>) => Promise<void>;\n}\n  \nexport const useApi = create<Api>((set, get) => ({\n  api: undefined,\n  isReady: false,\n  setApi: (api) => set({ api }),\n  ensureConnection: async (initApiFn) => {\n    const currentApi = get().api;\n    \n    if (currentApi?.isConnected && await currentApi.isReady) {\n      set({ isReady: true });\n      return;\n    }\n\n    try {\n      const AvailApi = await initApiFn();\n      AvailApi.on('ready', () => {\n        set({ isReady: true });\n      });\n\n      AvailApi.on('disconnected', async () => {\n        set({ isReady: false });\n        // Retry connection after disconnection\n        setTimeout(() => get().ensureConnection(initApiFn), 5000);\n      });\n\n      set({ \n        api: AvailApi, \n        isReady: true \n      });\n\n      return;\n    } catch (error) {\n      console.error('API_INTIALIZATION_ERROR', error);\n      set({ isReady: false });\n      // Retry after 5 seconds on failure\n      setTimeout(() => get().ensureConnection(initApiFn), 5000);\n    }\n  }\n}));","import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ApiPromise } from 'avail-js-sdk';\nimport { useCookies } from 'react-cookie';\nimport { getWallets, WalletAccount } from '@talismn/connect-wallets';\nimport { MetaMaskProvider } from '../../hooks/metamask';\nimport { AvailWalletProviderProps, ExtendedWalletAccount } from '../../types';\nimport { useAvailAccount } from '../../stores/availwallet';\nimport { useApi } from '../../stores/api';\nimport { initApi } from '../../utils';\n\ninterface AvailWalletContextType {\n  api?: ApiPromise;\n  isConnected: boolean;\n  rpcUrl?: string;\n  setRpcUrl: (url: string) => void;\n}\n\nconst AvailWalletContext = createContext<AvailWalletContextType>({\n  isConnected: false,\n  setRpcUrl: () => {}\n});\n\nexport const useAvailWallet = () => useContext(AvailWalletContext);\n\nexport const AvailWalletProvider: React.FC<AvailWalletProviderProps> = ({ \n  children, \n  api: externalApi \n}) => {\n  const [rpcUrl, setRpcUrl] = useState<string | undefined>(\n    typeof window !== 'undefined' ? (window as any).AVAIL_RPC_URL : undefined\n  );\n  const [cookies, setCookie] = useCookies([\n    \"substrateAddress\", \n    \"substrateWallet\", \n    \"metadataUpdated\"\n  ]);\n  \n  const { \n    selected, \n    setSelected, \n    selectedWallet, \n    setSelectedWallet \n  } = useAvailAccount();\n  \n  const { api, isReady, setApi, ensureConnection } = useApi();\n\n  // Initialize API \n  useEffect(() => {\n    if (externalApi) {\n      setApi(externalApi);\n      return;\n    }\n\n    if (!rpcUrl) return;\n    \n    const initializeApi = async () => {\n      await ensureConnection(() => initApi(rpcUrl));\n    };\n    \n    initializeApi();\n  }, [rpcUrl, externalApi, setApi, ensureConnection]);\n\n  // Load persisted wallet data\n  useEffect(() => {\n    const loadPersistedWallet = async () => {\n      if (!cookies.substrateAddress || !cookies.substrateWallet || !isReady) {\n        return;\n      }\n      \n      if (cookies.substrateWallet !== \"MetamaskSnap\") {\n        const wallets = getWallets();\n        const savedWallet = wallets.find(wallet => wallet.title === cookies.substrateWallet);\n        \n        if (!savedWallet) return;\n        \n        try {\n          await savedWallet.enable(\"avail-wallet\");\n          const accounts = await savedWallet.getAccounts();\n          const substrateAccounts = (accounts as ExtendedWalletAccount[])\n            .filter(account => account.type !== \"ethereum\");\n            \n          const savedAccount = substrateAccounts.find(\n            account => account.address === cookies.substrateAddress\n          );\n          \n          if (savedAccount) {\n            setSelectedWallet(savedWallet);\n            setSelected(savedAccount);\n          }\n        } catch (error) {\n          console.error(\"Failed to reconnect wallet:\", error);\n        }\n      }\n    };\n    \n    loadPersistedWallet();\n  }, [cookies.substrateAddress, cookies.substrateWallet, isReady, setSelected, setSelectedWallet]);\n\n  return (\n    <MetaMaskProvider>\n      <AvailWalletContext.Provider \n        value={{ \n          api: api,\n          isConnected: isReady, \n          rpcUrl,\n          setRpcUrl \n        }}\n      >\n        {children}\n      </AvailWalletContext.Provider>\n    </MetaMaskProvider>\n  );\n};","import React, { useState, useCallback, useEffect, Dispatch, SetStateAction } from 'react';\nimport { getWallets, Wallet, WalletAccount } from \"@talismn/connect-wallets\";\nimport { ApiPromise } from \"avail-js-sdk\";\nimport { useMetaMaskContext, useInvokeSnap, useMetaMask, useRequestSnap } from \"../../hooks/metamask\";\nimport { DisconnectWallet } from './DisconnectWallet';\nimport { AccountSelector } from './AccountSelector';\nimport { updateMetadata } from '../../utils';\nimport { WalletSelector } from './WalletSelector';\nimport { AvailWalletConnectProps, ExtendedWalletAccount } from '../../types';\nimport { useAvailAccount } from '../../stores/availwallet';\n\nexport const AvailWalletConnect: React.FC<AvailWalletConnectProps> = ({ api }) => {\n  const [open, setOpen] = useState(false);\n  const [supportedWallets, setSupportedWallets] = useState<Wallet[]>([]);\n  const [enabledAccounts, setEnabledAccounts] = useState<WalletAccount[]>([]);\n  const [cookies, setCookie] = useState<{\n    substrateAddress?: string; \n    substrateWallet?: string; \n    metadataUpdated?: any;\n  }>({});\n  \n  const requestSnap = useRequestSnap();\n  const invokeSnap = useInvokeSnap();\n  \n  const { \n    selected, \n    setSelected, \n    selectedWallet, \n    setSelectedWallet \n  } = useAvailAccount();\n  \n  const { installedSnap, metamaskInstalled } = useMetaMask();\n\n  const getSupportedWallets = useCallback(() => {\n    const wallets = getWallets();\n    setSupportedWallets(wallets);\n    return wallets;\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      const wallets = getSupportedWallets();\n  \n      if (cookies.substrateAddress && cookies.substrateWallet) {\n        if (cookies.substrateWallet === \"MetamaskSnap\" && installedSnap) {\n          setSelected({\n            address: cookies.substrateAddress as string,\n            source: \"MetamaskSnap\",\n          });\n        } else {\n          const selectedWallet = wallets.find((wallet) => {\n            return wallet.title === cookies.substrateWallet;\n          });\n  \n          if (!selectedWallet) {\n            return;\n          }\n  \n          (selectedWallet.enable(\"avail-wallet\") as any).then(() => {\n            selectedWallet.getAccounts().then((accounts: WalletAccount[]) => {\n              const enabledAccounts = (\n                accounts as ExtendedWalletAccount[]\n              ).filter((account) => {\n                return account.type !== \"ethereum\";\n              });\n              const selected = enabledAccounts.find(\n                (account) => account.address === cookies.substrateAddress\n              );\n  \n              if (!selected) {\n                return;\n              }\n  \n              setSelectedWallet(selectedWallet);\n              setEnabledAccounts(enabledAccounts);\n              setSelected(selected);\n            });\n          });\n        }\n      }\n    })();\n  }, [\n    cookies.substrateAddress, \n    cookies.substrateWallet, \n    installedSnap,\n    metamaskInstalled,\n    getSupportedWallets,\n    setSelected,\n    setSelectedWallet\n  ]);\n\n  const handleWalletSelect = useCallback(async (wallet: Wallet) => {\n    if (wallet.title === 'MetamaskSnap') {\n      try {\n        await requestSnap();\n        const address = await invokeSnap({ method: \"getAddress\" });\n        setSelected({ address: address as string, source: \"MetamaskSnap\" });\n        setCookie({\n          ...cookies,\n          substrateAddress: address as string,\n          substrateWallet: \"MetamaskSnap\"\n        });\n      } catch (error) {\n        console.error(\"Failed to connect to Avail Snap\", error);\n      }\n    } else {\n      setSelectedWallet(wallet);\n      await wallet.enable(\"avail-wallet\");\n      const accounts = await wallet.getAccounts();\n      //@ts-expect-error - type is not defined in the WalletAccount interface but it exists\n      const substrateAccounts = accounts.filter(account => account.type !== \"ethereum\");\n      setEnabledAccounts(substrateAccounts);\n    }\n  }, [invokeSnap, requestSnap, cookies, setCookie, setSelected, setSelectedWallet]);\n\n  const handleAccountSelect = useCallback(async (account: WalletAccount) => {\n    setSelected(account);\n    setCookie({\n      ...cookies,\n      substrateAddress: account.address,\n      substrateWallet: selectedWallet?.title\n    });\n    \n    if (api && selectedWallet) {\n      await updateMetadata({\n        api,\n        account,\n        metadataCookie: cookies.metadataUpdated,\n        selectedWallet: selectedWallet,\n        setCookie: (name: string, value: any, options: any) => {\n          setCookie({\n            ...cookies,\n            [name]: value\n          });\n        },\n      });\n    }\n    \n    setOpen(false);\n    console.info(`AVAIL_WALLET_CONNECT - ${selectedWallet?.title} - ${account.address}`);\n  }, [selectedWallet, api, cookies, setCookie, setSelected]);\n\n  const handleDisconnect = useCallback(() => {\n    setCookie({});\n    setSelected(null);\n    setSelectedWallet(null);\n    setEnabledAccounts([]);\n  }, [setCookie, setSelected, setSelectedWallet]);\n\n  return (\n    <>\n      {selected ? (\n        <DisconnectWallet \n          selected={selected} \n          installedSnap={installedSnap} \n          onDisconnect={handleDisconnect} \n        />\n      ) : (\n        <div>\n          <button\n            onClick={() => setOpen(!open)}\n            className=\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground shadow hover:bg-primary/90 h-9 px-4 py-2 !ml-2\"\n          >\n            Connect Wallet\n          </button>\n          \n          {open && (\n            <div className=\"fixed inset-0 z-50 flex items-start justify-center sm:items-center\">\n              <div className=\"fixed inset-0 bg-black/50\" onClick={() => setOpen(false)}></div>\n              <div className=\"z-50 grid w-full max-w-lg gap-4 bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg md:w-full\">\n                <div className=\"sm:max-w-[425px] bg-[#252831] border-2 border-[#3a3b3cb1] rounded-xl p-4\">\n                  <div>\n                    <h2 className=\"font-bold text-3xl text-white\">\n                      Connect Wallet\n                    </h2>\n                    \n                    {enabledAccounts.length === 0 ? (\n                      <>\n                        <p className=\"font-regular text-md text-white text-opacity-70 pt-2\">\n                          <div className=\"flex flex-row items-start justify-start pt-3 space-x-2\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                              <circle cx=\"12\" cy=\"12\" r=\"10\"/>\n                              <line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"/>\n                              <line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"/>\n                            </svg>\n                            <span>\n                              Don&apos;t have an Avail Wallet yet? Checkout this{\" \"}\n                              <a\n                                href=\"https://docs.availspace.app/avail-space/web-dashboard-user-guide/getting-started/how-to-install-subwallet-and-create-a-new-avail-account?utm_source=avail&utm_medium=docspace&utm_campaign=avlclaim\"\n                                className=\"underline\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                              >\n                                cool tutorial\n                              </a>{\" \"}\n                              by Subwallet.\n                            </span>\n                          </div>\n                        </p>\n                        <div className='pb-3'/>\n                        <WalletSelector \n                          supportedWallets={supportedWallets} \n                          onWalletSelect={handleWalletSelect}\n                          metamaskInstalled={metamaskInstalled}\n                        />\n                      </>\n                    ) : (\n                      <AccountSelector \n                        selectedWallet={selectedWallet}\n                        enabledAccounts={enabledAccounts}\n                        onAccountSelect={handleAccountSelect}\n                      />\n                    )}\n                  </div>\n                  <div className=\"flex w-full mt-2 text-white text-opacity-70 !flex-col !items-center !justify-center\">\n                    <div>\n                      {enabledAccounts && enabledAccounts.length > 0 ? (\n                        <button\n                          disabled={enabledAccounts.length <= 0}\n                          className=\"!bg-[#252831] hover:text-white !border-0 !p-0\"\n                          onClick={() => {\n                            setEnabledAccounts([]);\n                            setSelected(null);\n                          }}\n                        >\n                          <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"h-7 w-7 pr-2 inline-block\">\n                            <path d=\"m12 19-7-7 7-7\"/>\n                            <path d=\"M19 12H5\"/>\n                          </svg>\n                          <span className='text-lg'>Go back to wallets</span>\n                        </button>\n                      ) : (\n                        <p>Scroll to find more wallets</p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};"],"names":["async","hasSnapsSupport","provider","window","ethereum","request","method","_a","process","env","SNAP_ORIGIN","MetaMaskContext","createContext","installedSnap","error","setInstalledSnap","setError","MetaMaskProvider","children","setProvider","useState","useEffect","detected","_b","providers","getSnapsProvider","then","catch","console","timeout","setTimeout","clearTimeout","React","Provider","value","useMetaMaskContext","useContext","defaultSnapOrigin","useRequest","context","params","useMetaMask","isFlask","setIsFlask","metamaskInstalled","setMetamaskInstalled","isMetaMaskInstalled","Boolean","isMetaMask","detectMetaMask","snapsDetected","getSnap","snaps","detect","useInvokeSnap","snapId","useRequestSnap","version","DisconnectWallet","memo","selected","onDisconnect","className","onClick","navigator","clipboard","writeText","address","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","source","slice","displayName","AccountSelector","selectedWallet","enabledAccounts","onAccountSelect","Fragment","alt","title","src","logo","cx","cy","r","points","x1","y1","x2","y2","map","account","index","key","name","length","getInjectorMetadata","api","chain","runtimeChain","toString","specVersion","runtimeVersion","toNumber","tokenDecimals","registry","chainDecimals","tokenSymbol","chainTokens","genesisHash","toHex","ss58Format","chainSS58","chainType","icon","types","userExtensions","updateMetadata","metadataCookie","setCookie","injector","getWalletBySource","isConnected","isReady","wallet","metadata","extension","provide","updated","path","sameSite","e","debug","initApi","rpcUrl","retries","log","availJsSdk","initialize","endpoint","disconnect","Promise","resolve","Error","WalletSelector","supportedWallets","onWalletSelect","sortedWallets","useMemo","sort","a","b","disabled","installed","useAvailAccount","create","set","setSelected","setSelectedWallet","useApi","get","undefined","setApi","ensureConnection","initApiFn","currentApi","AvailApi","on","AvailWalletContext","setRpcUrl","open","setOpen","setSupportedWallets","setEnabledAccounts","cookies","requestSnap","invokeSnap","getSupportedWallets","useCallback","wallets","getWallets","substrateAddress","substrateWallet","find","enable","getAccounts","accounts","filter","type","handleWalletSelect","substrateAccounts","handleAccountSelect","metadataUpdated","options","info","handleDisconnect","href","target","rel","externalApi","AVAIL_RPC_URL","useCookies","initializeApi","savedWallet","savedAccount","loadPersistedWallet"],"mappings":"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"}